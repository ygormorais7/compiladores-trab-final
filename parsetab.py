
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BOOL COLON CONST DIVIDE ELSE EQ FALSE FLOAT FLOAT_CONST GEQ GT ID IF INPUT INT INTEGER_CONST LBRACE LEQ LPAREN LT MINUS NEQ NOT PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON STRING STRING_CONST TIMES TRUE WHILEprogram : PROGRAM ID LBRACE decl_list stmt_list RBRACEdecl_list : decl decl_list\n                     | emptydecl : type ID ASSIGN literal SEMICOLON\n                | type id_list SEMICOLONtype : INT\n                | FLOAT\n                | BOOL\n                | STRING\n                | CONSTid_list : ID id_tailid_tail : COLON ID id_tail\n                   | emptystmt_list : stmt stmt_list\n                     | emptystmt : assign_stmt\n                | print_stmt\n                | input_stmt\n                | if_stmt\n                | while_stmtassign_stmt : ID ASSIGN exp SEMICOLONprint_stmt : PRINT LPAREN exp_list RPAREN SEMICOLONinput_stmt : INPUT LPAREN id_list RPAREN SEMICOLONif_stmt : IF LPAREN exp RPAREN LBRACE stmt_list RBRACE else_partelse_part : ELSE LBRACE stmt_list RBRACE\n                     | emptywhile_stmt : WHILE LPAREN exp RPAREN LBRACE stmt_list RBRACEexp : exp_relationalexp_relational : exp_arithmetic\n                     | exp_arithmetic GT exp_arithmetic\n                     | exp_arithmetic LT exp_arithmetic\n                     | exp_arithmetic GEQ exp_arithmetic\n                     | exp_arithmetic LEQ exp_arithmetic\n                     | exp_arithmetic EQ exp_arithmetic\n                     | exp_arithmetic NEQ exp_arithmeticexp_arithmetic : exp_arithmetic PLUS term\n                     | exp_arithmetic MINUS term\n                     | termterm : term TIMES factor\n                | term DIVIDE factor\n                | factor\n                | unaryunary : NOT factor\n                 | MINUS factorBOOL_CONST : TRUE\n                     | FALSEfactor : ID \n                  | INTEGER_CONST \n                  | FLOAT_CONST \n                  | STRING_CONST \n                  | BOOL_CONST\n                  | LPAREN exp RPARENempty :literal : INTEGER_CONST\n                   | FLOAT_CONST\n                   | STRING_CONST\n                   | BOOL_CONSTexp_list : exp exp_tailexp_tail : COLON exp exp_tail\n                    | empty'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,31,],[0,-1,]),'ID':([2,4,5,6,7,8,9,10,11,12,13,16,18,19,20,21,22,27,30,33,34,35,36,39,41,47,54,55,70,71,72,73,74,75,76,77,78,79,80,86,91,104,106,107,108,112,113,114,116,117,119,],[3,-53,14,-53,-3,28,-6,-7,-8,-9,-10,14,-16,-17,-18,-19,-20,-2,42,42,61,42,42,69,-5,42,42,42,-21,42,42,42,42,42,42,42,42,42,42,42,-4,-22,-23,14,14,-53,-27,-24,-26,14,-25,]),'LBRACE':([3,89,90,115,],[4,107,108,117,]),'PRINT':([4,5,6,7,16,18,19,20,21,22,27,41,70,91,104,106,107,108,112,113,114,116,117,119,],[-53,23,-53,-3,23,-16,-17,-18,-19,-20,-2,-5,-21,-4,-22,-23,23,23,-53,-27,-24,-26,23,-25,]),'INPUT':([4,5,6,7,16,18,19,20,21,22,27,41,70,91,104,106,107,108,112,113,114,116,117,119,],[-53,24,-53,-3,24,-16,-17,-18,-19,-20,-2,-5,-21,-4,-22,-23,24,24,-53,-27,-24,-26,24,-25,]),'IF':([4,5,6,7,16,18,19,20,21,22,27,41,70,91,104,106,107,108,112,113,114,116,117,119,],[-53,25,-53,-3,25,-16,-17,-18,-19,-20,-2,-5,-21,-4,-22,-23,25,25,-53,-27,-24,-26,25,-25,]),'WHILE':([4,5,6,7,16,18,19,20,21,22,27,41,70,91,104,106,107,108,112,113,114,116,117,119,],[-53,26,-53,-3,26,-16,-17,-18,-19,-20,-2,-5,-21,-4,-22,-23,26,26,-53,-27,-24,-26,26,-25,]),'RBRACE':([4,5,6,7,15,16,17,18,19,20,21,22,27,32,41,70,91,104,106,107,108,110,111,112,113,114,116,117,118,119,],[-53,-53,-53,-3,31,-53,-15,-16,-17,-18,-19,-20,-2,-14,-5,-21,-4,-22,-23,-53,-53,112,113,-53,-27,-24,-26,-53,119,-25,]),'INT':([4,6,41,91,],[9,9,-5,-4,]),'FLOAT':([4,6,41,91,],[10,10,-5,-4,]),'BOOL':([4,6,41,91,],[11,11,-5,-4,]),'STRING':([4,6,41,91,],[12,12,-5,-4,]),'CONST':([4,6,41,91,],[13,13,-5,-4,]),'ASSIGN':([14,28,],[30,37,]),'LPAREN':([23,24,25,26,30,33,35,36,47,54,55,71,72,73,74,75,76,77,78,79,80,86,],[33,34,35,36,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'COLON':([28,42,44,45,46,48,49,50,51,52,53,56,57,59,61,69,81,83,93,94,95,96,97,98,99,100,101,102,103,105,],[39,-47,-28,-29,-38,-41,-42,-48,-49,-50,-51,-45,-46,86,39,39,-44,-43,-30,-31,-32,-33,-34,-35,-36,-37,-39,-40,-52,86,]),'SEMICOLON':([28,29,38,40,42,43,44,45,46,48,49,50,51,52,53,56,57,64,65,66,67,68,69,81,83,84,88,92,93,94,95,96,97,98,99,100,101,102,103,],[-53,41,-11,-13,-47,70,-28,-29,-38,-41,-42,-48,-49,-50,-51,-45,-46,91,-54,-55,-56,-57,-53,-44,-43,104,106,-12,-30,-31,-32,-33,-34,-35,-36,-37,-39,-40,-52,]),'INTEGER_CONST':([30,33,35,36,37,47,54,55,71,72,73,74,75,76,77,78,79,80,86,],[50,50,50,50,65,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'FLOAT_CONST':([30,33,35,36,37,47,54,55,71,72,73,74,75,76,77,78,79,80,86,],[51,51,51,51,66,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'STRING_CONST':([30,33,35,36,37,47,54,55,71,72,73,74,75,76,77,78,79,80,86,],[52,52,52,52,67,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'NOT':([30,33,35,36,54,71,72,73,74,75,76,77,78,86,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'MINUS':([30,33,35,36,42,45,46,48,49,50,51,52,53,54,56,57,71,72,73,74,75,76,77,78,81,83,86,93,94,95,96,97,98,99,100,101,102,103,],[47,47,47,47,-47,78,-38,-41,-42,-48,-49,-50,-51,47,-45,-46,47,47,47,47,47,47,47,47,-44,-43,47,78,78,78,78,78,78,-36,-37,-39,-40,-52,]),'TRUE':([30,33,35,36,37,47,54,55,71,72,73,74,75,76,77,78,79,80,86,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'FALSE':([30,33,35,36,37,47,54,55,71,72,73,74,75,76,77,78,79,80,86,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'RPAREN':([38,40,42,44,45,46,48,49,50,51,52,53,56,57,58,59,60,61,62,63,69,81,82,83,85,87,92,93,94,95,96,97,98,99,100,101,102,103,105,109,],[-11,-13,-47,-28,-29,-38,-41,-42,-48,-49,-50,-51,-45,-46,84,-53,88,-53,89,90,-53,-44,103,-43,-58,-60,-12,-30,-31,-32,-33,-34,-35,-36,-37,-39,-40,-52,-53,-59,]),'TIMES':([42,46,48,49,50,51,52,53,56,57,81,83,99,100,101,102,103,],[-47,79,-41,-42,-48,-49,-50,-51,-45,-46,-44,-43,79,79,-39,-40,-52,]),'DIVIDE':([42,46,48,49,50,51,52,53,56,57,81,83,99,100,101,102,103,],[-47,80,-41,-42,-48,-49,-50,-51,-45,-46,-44,-43,80,80,-39,-40,-52,]),'GT':([42,45,46,48,49,50,51,52,53,56,57,81,83,99,100,101,102,103,],[-47,71,-38,-41,-42,-48,-49,-50,-51,-45,-46,-44,-43,-36,-37,-39,-40,-52,]),'LT':([42,45,46,48,49,50,51,52,53,56,57,81,83,99,100,101,102,103,],[-47,72,-38,-41,-42,-48,-49,-50,-51,-45,-46,-44,-43,-36,-37,-39,-40,-52,]),'GEQ':([42,45,46,48,49,50,51,52,53,56,57,81,83,99,100,101,102,103,],[-47,73,-38,-41,-42,-48,-49,-50,-51,-45,-46,-44,-43,-36,-37,-39,-40,-52,]),'LEQ':([42,45,46,48,49,50,51,52,53,56,57,81,83,99,100,101,102,103,],[-47,74,-38,-41,-42,-48,-49,-50,-51,-45,-46,-44,-43,-36,-37,-39,-40,-52,]),'EQ':([42,45,46,48,49,50,51,52,53,56,57,81,83,99,100,101,102,103,],[-47,75,-38,-41,-42,-48,-49,-50,-51,-45,-46,-44,-43,-36,-37,-39,-40,-52,]),'NEQ':([42,45,46,48,49,50,51,52,53,56,57,81,83,99,100,101,102,103,],[-47,76,-38,-41,-42,-48,-49,-50,-51,-45,-46,-44,-43,-36,-37,-39,-40,-52,]),'PLUS':([42,45,46,48,49,50,51,52,53,56,57,81,83,93,94,95,96,97,98,99,100,101,102,103,],[-47,77,-38,-41,-42,-48,-49,-50,-51,-45,-46,-44,-43,77,77,77,77,77,77,-36,-37,-39,-40,-52,]),'ELSE':([112,],[115,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'decl_list':([4,6,],[5,27,]),'decl':([4,6,],[6,6,]),'empty':([4,5,6,16,28,59,61,69,105,107,108,112,117,],[7,17,7,17,40,87,40,40,87,17,17,116,17,]),'type':([4,6,],[8,8,]),'stmt_list':([5,16,107,108,117,],[15,32,110,111,118,]),'stmt':([5,16,107,108,117,],[16,16,16,16,16,]),'assign_stmt':([5,16,107,108,117,],[18,18,18,18,18,]),'print_stmt':([5,16,107,108,117,],[19,19,19,19,19,]),'input_stmt':([5,16,107,108,117,],[20,20,20,20,20,]),'if_stmt':([5,16,107,108,117,],[21,21,21,21,21,]),'while_stmt':([5,16,107,108,117,],[22,22,22,22,22,]),'id_list':([8,34,],[29,60,]),'id_tail':([28,61,69,],[38,38,92,]),'exp':([30,33,35,36,54,86,],[43,59,62,63,82,105,]),'exp_relational':([30,33,35,36,54,86,],[44,44,44,44,44,44,]),'exp_arithmetic':([30,33,35,36,54,71,72,73,74,75,76,86,],[45,45,45,45,45,93,94,95,96,97,98,45,]),'term':([30,33,35,36,54,71,72,73,74,75,76,77,78,86,],[46,46,46,46,46,46,46,46,46,46,46,99,100,46,]),'factor':([30,33,35,36,47,54,55,71,72,73,74,75,76,77,78,79,80,86,],[48,48,48,48,81,48,83,48,48,48,48,48,48,48,48,101,102,48,]),'unary':([30,33,35,36,54,71,72,73,74,75,76,77,78,86,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'BOOL_CONST':([30,33,35,36,37,47,54,55,71,72,73,74,75,76,77,78,79,80,86,],[53,53,53,53,68,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'exp_list':([33,],[58,]),'literal':([37,],[64,]),'exp_tail':([59,105,],[85,109,]),'else_part':([112,],[114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID LBRACE decl_list stmt_list RBRACE','program',6,'p_program','parser.py',44),
  ('decl_list -> decl decl_list','decl_list',2,'p_decl_list','parser.py',49),
  ('decl_list -> empty','decl_list',1,'p_decl_list','parser.py',50),
  ('decl -> type ID ASSIGN literal SEMICOLON','decl',5,'p_decl','parser.py',59),
  ('decl -> type id_list SEMICOLON','decl',3,'p_decl','parser.py',60),
  ('type -> INT','type',1,'p_type','parser.py',85),
  ('type -> FLOAT','type',1,'p_type','parser.py',86),
  ('type -> BOOL','type',1,'p_type','parser.py',87),
  ('type -> STRING','type',1,'p_type','parser.py',88),
  ('type -> CONST','type',1,'p_type','parser.py',89),
  ('id_list -> ID id_tail','id_list',2,'p_id_list','parser.py',95),
  ('id_tail -> COLON ID id_tail','id_tail',3,'p_id_tail','parser.py',104),
  ('id_tail -> empty','id_tail',1,'p_id_tail','parser.py',105),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',114),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',115),
  ('stmt -> assign_stmt','stmt',1,'p_stmt','parser.py',124),
  ('stmt -> print_stmt','stmt',1,'p_stmt','parser.py',125),
  ('stmt -> input_stmt','stmt',1,'p_stmt','parser.py',126),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser.py',127),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser.py',128),
  ('assign_stmt -> ID ASSIGN exp SEMICOLON','assign_stmt',4,'p_assign_stmt','parser.py',134),
  ('print_stmt -> PRINT LPAREN exp_list RPAREN SEMICOLON','print_stmt',5,'p_print_stmt','parser.py',147),
  ('input_stmt -> INPUT LPAREN id_list RPAREN SEMICOLON','input_stmt',5,'p_input_stmt','parser.py',153),
  ('if_stmt -> IF LPAREN exp RPAREN LBRACE stmt_list RBRACE else_part','if_stmt',8,'p_if_stmt','parser.py',161),
  ('else_part -> ELSE LBRACE stmt_list RBRACE','else_part',4,'p_else_part','parser.py',177),
  ('else_part -> empty','else_part',1,'p_else_part','parser.py',178),
  ('while_stmt -> WHILE LPAREN exp RPAREN LBRACE stmt_list RBRACE','while_stmt',7,'p_while_stmt','parser.py',187),
  ('exp -> exp_relational','exp',1,'p_exp','parser.py',201),
  ('exp_relational -> exp_arithmetic','exp_relational',1,'p_exp_relational','parser.py',207),
  ('exp_relational -> exp_arithmetic GT exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',208),
  ('exp_relational -> exp_arithmetic LT exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',209),
  ('exp_relational -> exp_arithmetic GEQ exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',210),
  ('exp_relational -> exp_arithmetic LEQ exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',211),
  ('exp_relational -> exp_arithmetic EQ exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',212),
  ('exp_relational -> exp_arithmetic NEQ exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',213),
  ('exp_arithmetic -> exp_arithmetic PLUS term','exp_arithmetic',3,'p_exp_arithmetic','parser.py',222),
  ('exp_arithmetic -> exp_arithmetic MINUS term','exp_arithmetic',3,'p_exp_arithmetic','parser.py',223),
  ('exp_arithmetic -> term','exp_arithmetic',1,'p_exp_arithmetic','parser.py',224),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',246),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',247),
  ('term -> factor','term',1,'p_term','parser.py',248),
  ('term -> unary','term',1,'p_term','parser.py',249),
  ('unary -> NOT factor','unary',2,'p_unary','parser.py',271),
  ('unary -> MINUS factor','unary',2,'p_unary','parser.py',272),
  ('BOOL_CONST -> TRUE','BOOL_CONST',1,'p_bool_const','parser.py',291),
  ('BOOL_CONST -> FALSE','BOOL_CONST',1,'p_bool_const','parser.py',292),
  ('factor -> ID','factor',1,'p_factor','parser.py',298),
  ('factor -> INTEGER_CONST','factor',1,'p_factor','parser.py',299),
  ('factor -> FLOAT_CONST','factor',1,'p_factor','parser.py',300),
  ('factor -> STRING_CONST','factor',1,'p_factor','parser.py',301),
  ('factor -> BOOL_CONST','factor',1,'p_factor','parser.py',302),
  ('factor -> LPAREN exp RPAREN','factor',3,'p_factor','parser.py',303),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',314),
  ('literal -> INTEGER_CONST','literal',1,'p_literal','parser.py',320),
  ('literal -> FLOAT_CONST','literal',1,'p_literal','parser.py',321),
  ('literal -> STRING_CONST','literal',1,'p_literal','parser.py',322),
  ('literal -> BOOL_CONST','literal',1,'p_literal','parser.py',323),
  ('exp_list -> exp exp_tail','exp_list',2,'p_exp_list','parser.py',329),
  ('exp_tail -> COLON exp exp_tail','exp_tail',3,'p_exp_tail','parser.py',338),
  ('exp_tail -> empty','exp_tail',1,'p_exp_tail','parser.py',339),
]
