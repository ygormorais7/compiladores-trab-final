
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BOOL COLON CONST DIVIDE ELSE EQ FALSE FLOAT FLOAT_CONST GEQ GT ID IF INPUT INT INTEGER_CONST LBRACE LEQ LPAREN LT MINUS NEQ NOT PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON STRING STRING_CONST TIMES TRUE WHILEprogram : PROGRAM ID LBRACE decl_list stmt_list RBRACEdecl_list : decl decl_list\n                     | emptydecl : type ID ASSIGN literal SEMICOLON\n                | type id_list SEMICOLONtype : INT\n                | FLOAT\n                | BOOL\n                | STRING\n                | CONSTid_list : ID id_tailid_tail : COLON ID id_tail\n                   | emptystmt_list : stmt stmt_list\n                     | emptystmt : assign_stmt\n                | print_stmt\n                | input_stmt\n                | if_stmt\n                | while_stmtassign_stmt : ID ASSIGN exp SEMICOLONprint_stmt : PRINT LPAREN exp_list RPAREN SEMICOLONinput_stmt : INPUT LPAREN id_list RPAREN SEMICOLONif_stmt : IF LPAREN exp RPAREN LBRACE stmt_list RBRACE else_partelse_part : ELSE LBRACE stmt_list RBRACE\n                     | emptywhile_stmt : WHILE LPAREN exp RPAREN LBRACE stmt_list RBRACEexp : exp_relationalexp_relational : exp_arithmetic\n                     | exp_arithmetic GT exp_arithmetic\n                     | exp_arithmetic LT exp_arithmetic\n                     | exp_arithmetic GEQ exp_arithmetic\n                     | exp_arithmetic LEQ exp_arithmetic\n                     | exp_arithmetic EQ exp_arithmetic\n                     | exp_arithmetic NEQ exp_arithmeticexp_arithmetic : exp_arithmetic PLUS term\n                     | exp_arithmetic MINUS term\n                     | termterm : term TIMES factor\n                | term DIVIDE factor\n                | factorBOOL_CONST : TRUE\n                     | FALSEfactor : ID \n                  | INTEGER_CONST \n                  | FLOAT_CONST \n                  | STRING_CONST \n                  | BOOL_CONST\n                  | LPAREN exp RPARENempty :literal : INTEGER_CONST\n                   | FLOAT_CONST\n                   | STRING_CONST\n                   | BOOL_CONSTexp_list : exp exp_tailexp_tail : COLON exp exp_tail\n                    | empty'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,31,],[0,-1,]),'ID':([2,4,5,6,7,8,9,10,11,12,13,16,18,19,20,21,22,27,30,33,34,35,36,39,41,52,67,68,69,70,71,72,73,74,75,76,77,81,86,99,101,102,103,107,108,109,111,112,114,],[3,-50,14,-50,-3,28,-6,-7,-8,-9,-10,14,-16,-17,-18,-19,-20,-2,42,42,58,42,42,66,-5,42,-21,42,42,42,42,42,42,42,42,42,42,42,-4,-22,-23,14,14,-50,-27,-24,-26,14,-25,]),'LBRACE':([3,84,85,110,],[4,102,103,112,]),'PRINT':([4,5,6,7,16,18,19,20,21,22,27,41,67,86,99,101,102,103,107,108,109,111,112,114,],[-50,23,-50,-3,23,-16,-17,-18,-19,-20,-2,-5,-21,-4,-22,-23,23,23,-50,-27,-24,-26,23,-25,]),'INPUT':([4,5,6,7,16,18,19,20,21,22,27,41,67,86,99,101,102,103,107,108,109,111,112,114,],[-50,24,-50,-3,24,-16,-17,-18,-19,-20,-2,-5,-21,-4,-22,-23,24,24,-50,-27,-24,-26,24,-25,]),'IF':([4,5,6,7,16,18,19,20,21,22,27,41,67,86,99,101,102,103,107,108,109,111,112,114,],[-50,25,-50,-3,25,-16,-17,-18,-19,-20,-2,-5,-21,-4,-22,-23,25,25,-50,-27,-24,-26,25,-25,]),'WHILE':([4,5,6,7,16,18,19,20,21,22,27,41,67,86,99,101,102,103,107,108,109,111,112,114,],[-50,26,-50,-3,26,-16,-17,-18,-19,-20,-2,-5,-21,-4,-22,-23,26,26,-50,-27,-24,-26,26,-25,]),'RBRACE':([4,5,6,7,15,16,17,18,19,20,21,22,27,32,41,67,86,99,101,102,103,105,106,107,108,109,111,112,113,114,],[-50,-50,-50,-3,31,-50,-15,-16,-17,-18,-19,-20,-2,-14,-5,-21,-4,-22,-23,-50,-50,107,108,-50,-27,-24,-26,-50,114,-25,]),'INT':([4,6,41,86,],[9,9,-5,-4,]),'FLOAT':([4,6,41,86,],[10,10,-5,-4,]),'BOOL':([4,6,41,86,],[11,11,-5,-4,]),'STRING':([4,6,41,86,],[12,12,-5,-4,]),'CONST':([4,6,41,86,],[13,13,-5,-4,]),'ASSIGN':([14,28,],[30,37,]),'LPAREN':([23,24,25,26,30,33,35,36,52,68,69,70,71,72,73,74,75,76,77,81,],[33,34,35,36,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'COLON':([28,42,44,45,46,47,48,49,50,51,53,54,56,58,66,88,89,90,91,92,93,94,95,96,97,98,100,],[39,-44,-28,-29,-38,-41,-45,-46,-47,-48,-42,-43,81,39,39,-30,-31,-32,-33,-34,-35,-36,-37,-39,-40,-49,81,]),'SEMICOLON':([28,29,38,40,42,43,44,45,46,47,48,49,50,51,53,54,61,62,63,64,65,66,79,83,87,88,89,90,91,92,93,94,95,96,97,98,],[-50,41,-11,-13,-44,67,-28,-29,-38,-41,-45,-46,-47,-48,-42,-43,86,-51,-52,-53,-54,-50,99,101,-12,-30,-31,-32,-33,-34,-35,-36,-37,-39,-40,-49,]),'INTEGER_CONST':([30,33,35,36,37,52,68,69,70,71,72,73,74,75,76,77,81,],[48,48,48,48,62,48,48,48,48,48,48,48,48,48,48,48,48,]),'FLOAT_CONST':([30,33,35,36,37,52,68,69,70,71,72,73,74,75,76,77,81,],[49,49,49,49,63,49,49,49,49,49,49,49,49,49,49,49,49,]),'STRING_CONST':([30,33,35,36,37,52,68,69,70,71,72,73,74,75,76,77,81,],[50,50,50,50,64,50,50,50,50,50,50,50,50,50,50,50,50,]),'TRUE':([30,33,35,36,37,52,68,69,70,71,72,73,74,75,76,77,81,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'FALSE':([30,33,35,36,37,52,68,69,70,71,72,73,74,75,76,77,81,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'RPAREN':([38,40,42,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,66,78,80,82,87,88,89,90,91,92,93,94,95,96,97,98,100,104,],[-11,-13,-44,-28,-29,-38,-41,-45,-46,-47,-48,-42,-43,79,-50,83,-50,84,85,-50,98,-55,-57,-12,-30,-31,-32,-33,-34,-35,-36,-37,-39,-40,-49,-50,-56,]),'TIMES':([42,46,47,48,49,50,51,53,54,94,95,96,97,98,],[-44,76,-41,-45,-46,-47,-48,-42,-43,76,76,-39,-40,-49,]),'DIVIDE':([42,46,47,48,49,50,51,53,54,94,95,96,97,98,],[-44,77,-41,-45,-46,-47,-48,-42,-43,77,77,-39,-40,-49,]),'GT':([42,45,46,47,48,49,50,51,53,54,94,95,96,97,98,],[-44,68,-38,-41,-45,-46,-47,-48,-42,-43,-36,-37,-39,-40,-49,]),'LT':([42,45,46,47,48,49,50,51,53,54,94,95,96,97,98,],[-44,69,-38,-41,-45,-46,-47,-48,-42,-43,-36,-37,-39,-40,-49,]),'GEQ':([42,45,46,47,48,49,50,51,53,54,94,95,96,97,98,],[-44,70,-38,-41,-45,-46,-47,-48,-42,-43,-36,-37,-39,-40,-49,]),'LEQ':([42,45,46,47,48,49,50,51,53,54,94,95,96,97,98,],[-44,71,-38,-41,-45,-46,-47,-48,-42,-43,-36,-37,-39,-40,-49,]),'EQ':([42,45,46,47,48,49,50,51,53,54,94,95,96,97,98,],[-44,72,-38,-41,-45,-46,-47,-48,-42,-43,-36,-37,-39,-40,-49,]),'NEQ':([42,45,46,47,48,49,50,51,53,54,94,95,96,97,98,],[-44,73,-38,-41,-45,-46,-47,-48,-42,-43,-36,-37,-39,-40,-49,]),'PLUS':([42,45,46,47,48,49,50,51,53,54,88,89,90,91,92,93,94,95,96,97,98,],[-44,74,-38,-41,-45,-46,-47,-48,-42,-43,74,74,74,74,74,74,-36,-37,-39,-40,-49,]),'MINUS':([42,45,46,47,48,49,50,51,53,54,88,89,90,91,92,93,94,95,96,97,98,],[-44,75,-38,-41,-45,-46,-47,-48,-42,-43,75,75,75,75,75,75,-36,-37,-39,-40,-49,]),'ELSE':([107,],[110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'decl_list':([4,6,],[5,27,]),'decl':([4,6,],[6,6,]),'empty':([4,5,6,16,28,56,58,66,100,102,103,107,112,],[7,17,7,17,40,82,40,40,82,17,17,111,17,]),'type':([4,6,],[8,8,]),'stmt_list':([5,16,102,103,112,],[15,32,105,106,113,]),'stmt':([5,16,102,103,112,],[16,16,16,16,16,]),'assign_stmt':([5,16,102,103,112,],[18,18,18,18,18,]),'print_stmt':([5,16,102,103,112,],[19,19,19,19,19,]),'input_stmt':([5,16,102,103,112,],[20,20,20,20,20,]),'if_stmt':([5,16,102,103,112,],[21,21,21,21,21,]),'while_stmt':([5,16,102,103,112,],[22,22,22,22,22,]),'id_list':([8,34,],[29,57,]),'id_tail':([28,58,66,],[38,38,87,]),'exp':([30,33,35,36,52,81,],[43,56,59,60,78,100,]),'exp_relational':([30,33,35,36,52,81,],[44,44,44,44,44,44,]),'exp_arithmetic':([30,33,35,36,52,68,69,70,71,72,73,81,],[45,45,45,45,45,88,89,90,91,92,93,45,]),'term':([30,33,35,36,52,68,69,70,71,72,73,74,75,81,],[46,46,46,46,46,46,46,46,46,46,46,94,95,46,]),'factor':([30,33,35,36,52,68,69,70,71,72,73,74,75,76,77,81,],[47,47,47,47,47,47,47,47,47,47,47,47,47,96,97,47,]),'BOOL_CONST':([30,33,35,36,37,52,68,69,70,71,72,73,74,75,76,77,81,],[51,51,51,51,65,51,51,51,51,51,51,51,51,51,51,51,51,]),'exp_list':([33,],[55,]),'literal':([37,],[61,]),'exp_tail':([56,100,],[80,104,]),'else_part':([107,],[109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID LBRACE decl_list stmt_list RBRACE','program',6,'p_program','parser.py',21),
  ('decl_list -> decl decl_list','decl_list',2,'p_decl_list','parser.py',25),
  ('decl_list -> empty','decl_list',1,'p_decl_list','parser.py',26),
  ('decl -> type ID ASSIGN literal SEMICOLON','decl',5,'p_decl','parser.py',34),
  ('decl -> type id_list SEMICOLON','decl',3,'p_decl','parser.py',35),
  ('type -> INT','type',1,'p_type','parser.py',53),
  ('type -> FLOAT','type',1,'p_type','parser.py',54),
  ('type -> BOOL','type',1,'p_type','parser.py',55),
  ('type -> STRING','type',1,'p_type','parser.py',56),
  ('type -> CONST','type',1,'p_type','parser.py',57),
  ('id_list -> ID id_tail','id_list',2,'p_id_list','parser.py',62),
  ('id_tail -> COLON ID id_tail','id_tail',3,'p_id_tail','parser.py',70),
  ('id_tail -> empty','id_tail',1,'p_id_tail','parser.py',71),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',79),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',80),
  ('stmt -> assign_stmt','stmt',1,'p_stmt','parser.py',88),
  ('stmt -> print_stmt','stmt',1,'p_stmt','parser.py',89),
  ('stmt -> input_stmt','stmt',1,'p_stmt','parser.py',90),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser.py',91),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser.py',92),
  ('assign_stmt -> ID ASSIGN exp SEMICOLON','assign_stmt',4,'p_assign_stmt','parser.py',97),
  ('print_stmt -> PRINT LPAREN exp_list RPAREN SEMICOLON','print_stmt',5,'p_print_stmt','parser.py',110),
  ('input_stmt -> INPUT LPAREN id_list RPAREN SEMICOLON','input_stmt',5,'p_input_stmt','parser.py',115),
  ('if_stmt -> IF LPAREN exp RPAREN LBRACE stmt_list RBRACE else_part','if_stmt',8,'p_if_stmt','parser.py',122),
  ('else_part -> ELSE LBRACE stmt_list RBRACE','else_part',4,'p_else_part','parser.py',132),
  ('else_part -> empty','else_part',1,'p_else_part','parser.py',133),
  ('while_stmt -> WHILE LPAREN exp RPAREN LBRACE stmt_list RBRACE','while_stmt',7,'p_while_stmt','parser.py',141),
  ('exp -> exp_relational','exp',1,'p_exp','parser.py',150),
  ('exp_relational -> exp_arithmetic','exp_relational',1,'p_exp_relational','parser.py',156),
  ('exp_relational -> exp_arithmetic GT exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',157),
  ('exp_relational -> exp_arithmetic LT exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',158),
  ('exp_relational -> exp_arithmetic GEQ exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',159),
  ('exp_relational -> exp_arithmetic LEQ exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',160),
  ('exp_relational -> exp_arithmetic EQ exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',161),
  ('exp_relational -> exp_arithmetic NEQ exp_arithmetic','exp_relational',3,'p_exp_relational','parser.py',162),
  ('exp_arithmetic -> exp_arithmetic PLUS term','exp_arithmetic',3,'p_exp_arithmetic','parser.py',171),
  ('exp_arithmetic -> exp_arithmetic MINUS term','exp_arithmetic',3,'p_exp_arithmetic','parser.py',172),
  ('exp_arithmetic -> term','exp_arithmetic',1,'p_exp_arithmetic','parser.py',173),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',187),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',188),
  ('term -> factor','term',1,'p_term','parser.py',189),
  ('BOOL_CONST -> TRUE','BOOL_CONST',1,'p_bool_const','parser.py',197),
  ('BOOL_CONST -> FALSE','BOOL_CONST',1,'p_bool_const','parser.py',198),
  ('factor -> ID','factor',1,'p_factor','parser.py',203),
  ('factor -> INTEGER_CONST','factor',1,'p_factor','parser.py',204),
  ('factor -> FLOAT_CONST','factor',1,'p_factor','parser.py',205),
  ('factor -> STRING_CONST','factor',1,'p_factor','parser.py',206),
  ('factor -> BOOL_CONST','factor',1,'p_factor','parser.py',207),
  ('factor -> LPAREN exp RPAREN','factor',3,'p_factor','parser.py',208),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',218),
  ('literal -> INTEGER_CONST','literal',1,'p_literal','parser.py',223),
  ('literal -> FLOAT_CONST','literal',1,'p_literal','parser.py',224),
  ('literal -> STRING_CONST','literal',1,'p_literal','parser.py',225),
  ('literal -> BOOL_CONST','literal',1,'p_literal','parser.py',226),
  ('exp_list -> exp exp_tail','exp_list',2,'p_exp_list','parser.py',231),
  ('exp_tail -> COLON exp exp_tail','exp_tail',3,'p_exp_tail','parser.py',239),
  ('exp_tail -> empty','exp_tail',1,'p_exp_tail','parser.py',240),
]
